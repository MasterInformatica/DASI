// Propias de ICARO
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;

// Propias del agente
import icaro.aplicaciones.agentes.agenteAplicacionMineroMRS.informacion.*
import icaro.aplicaciones.agentes.agenteAplicacionMineroMRS.tareas.*
import icaro.aplicaciones.agentes.agenteAplicacionMineroMRS.objetivos.*

// Propias de MRS
import icaro.aplicaciones.MRS.informacion.*;
import icaro.aplicaciones.MRS.tareasComunes.*;

// Propias de Java
import java.util.List;
import java.util.ArrayList;
import java.lang.String;

//-----------------------------------------------------------------------------------------------------------

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

 /* Si no hay foco, es que estamos en la primera regla */
rule "Acciones Iniciales Minero MRS "
 when
    not ( exists(Focus()))
 then
   TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InicializarVictima.class);
   tarea1.ejecutar(agentId);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//------------  ConocerEquipo  --------------------------
rule "Incio de Simulacion"
 when
 	obj: PedirAyuda(state == Objetivo.SOLVING)
    fc : Focus(foco == obj)
    robots : ListaRobots()
 then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(EnviarPeticionAyuda.class);
 	t1.ejecutar(agentId, robots, obj, fc);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end
