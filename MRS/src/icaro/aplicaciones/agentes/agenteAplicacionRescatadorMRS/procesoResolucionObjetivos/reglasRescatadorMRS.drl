// Propias de ICARO
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;

// Propias del agente
import icaro.aplicaciones.agentes.agenteAplicacionRescatadorMRS.informacion.*
import icaro.aplicaciones.agentes.agenteAplicacionRescatadorMRS.tareas.*
import icaro.aplicaciones.agentes.agenteAplicacionRescatadorMRS.objetivos.*

// Propias de MRS
import icaro.aplicaciones.MRS.informacion.*;
import icaro.aplicaciones.MRS.tareasComunes.*;

// Propias de Java
import java.util.List;
import java.util.ArrayList;
import java.lang.String;

//-----------------------------------------------------------------------------------------------------------

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;
 
 
 /* Si no hay foco, es que estamos en la primera regla */
rule "Acciones Iniciales Rescatador MRS "
 when
    not ( exists(Focus()))
 then
   TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InicializarRobot.class);
   tarea1.ejecutar(agentId);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
   //TODO: Crear los componentes internos aqui (mvto, ..., ...)
end

//------------  ProcesarInicioFase ---------------------
rule "Nueva Fase"
 when
 	$fase : InicioEstado($st : estadoIniciado)
 	$yo : Robot( getName() == agentId)
 	$fc : Focus()
 	$mo : MisObjetivos()
 then
	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarInicioFase.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $fase);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName()+ " " +$st);
end

//------------  ConocerEquipo  --------------------------
rule "Me han informado del equipo (conocerEquipo)"
 when
 	$yo : Robot( getName() == agentId)
 	$fc : Focus()
 	$mo : MisObjetivos()
 	$obj: ConocerEquipo(state == Objetivo.SOLVING)
    robots : ListaIds()
 then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarNombreEquipo.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, robots);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//----------- Evaluar solicitudes -----------------------
rule "Procesar peticion Victima"
 when
  	$yo : Robot( getName() == agentId)
 	$obj: EvaluarSolicitudes(state == Objetivo.SOLVING)
 	$fc : Focus(foco == $obj)
 	$mo : MisObjetivos()
 	
 	robots: ListaIds()
    
   	msg : SolicitudAyuda() //El mensaje de auxilio de los mineros
  
   	ce : ControlEvaluacionVictimas()
 then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarSolicitudAyuda.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, robots, msg, ce);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//----------- Recibir evaluaciones otros robots -----------------------
rule "Recibir mensaje evaluacion otro robot"
 when
   	$yo : Robot( getName() == agentId)
 	$obj: EvaluarSolicitudes(state == Objetivo.SOLVING)
 	$fc : Focus(foco == $obj)
 	$mo : MisObjetivos()

    robots: ListaIds()
 	
 	msg: MsgEvaluacionRobot($v: minero)
 
 	ce : ControlEvaluacionVictimas()
 	eo : EvaluacionObjetivo(victimaName == $v)
 then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarEvaluacion.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, robots, msg, ce, eo);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//----------- Desplazar objetivo actual -----------------------
rule "Se han evaluado todas las victimas por todos los robots"
 when
  	$yo : Robot( getName() == agentId)
 	$obj: EvaluarSolicitudes(state == Objetivo.SOLVING)
 	$fc : Focus(foco == $obj)
 	$mo : MisObjetivos()

	ce : ControlEvaluacionVictimas(finalizadaTodasEvaluaciones == true)
	not(  SolicitudAyuda() )  //No quedan solicitudes por evaluar por nosotros
	not( MsgEvaluacionRobot() )
 then
	TareaSincrona t1 = gestorTareas.crearTareaSincrona(TodasVictimasEvaluadas.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, ce);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end	


// A PARTIR DE AQUI CON OTRO OBJETIVO
/*rule "Se ha recibido todas las evaluaciones del objetivo"
 when
 	obj: AsignarRobots(state == Objetivo.SOLVING) //CAMBIAR ESTE OBJ
    fc : Focus(foco == obj)
    robots: ListaIds()
 	yo : Robot( getName() == agentId)
     	
    ce : ControlEvaluacionVictimas($v: proximaVictima)
    eo : EvaluacionObjetivo(victimaName == $v, finalizadaEvaluacion == true)
 then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(RecibidasTodasEvaluaciones.class);
 	t1.ejecutar(obj, fc, robots, yo, ce, eo);
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName()+" " + $v);
end

//Estoy esperando a que me informe el mejor robot
rule "Esperar confirmacion de robot asignado a objetivo"
  when
  	yo : Robot( getName() == agentId)
  	fc : Focus()
  	mo : MisObjetivos()
  	
  	obj: EsperaRobotAsignado($v: minero) 	
    msg: MsgAsignacionObjetivo(minero == $v) 	
     	
    ce : ControlEvaluacionVictimas()
    eo : EvaluacionObjetivo(victimaName == $v, finalizadaEvaluacion == true)
  then
  	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarMsgAsignacionRobot.class);
  	t1.ejecutar(agentId, yo, fc, mo, obj, msg, ce, eo);
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end

//Soy el mejor robot, tengo que informar a todos
rule "Informar que soy el mejor robot"
  when
  	yo : Robot( getName() == agentId)
  	fc : Focus()
  	mo : MisObjetivos()
  	lr : ListaIds()
  	
  	obj : InformarSoyElMejorRobot($v: minero)
  	
  	ce : ControlEvaluacionVictimas()
  	eo : EvaluacionObjetivo(victimaName == $v, finalizadaEvaluacion == true)
  then
  	TareaSincrona t1 = gestorTareas.crearTareaSincrona(InformarAutoasignacionVictima.class);
  	t1.ejecutar(agentId, yo, fc, mo, lr, obj, ce, eo);
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end*/