// Propias de ICARO
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;

// Propias del agente
import icaro.aplicaciones.agentes.agenteAplicacionRescatadorMRS.informacion.*
import icaro.aplicaciones.agentes.agenteAplicacionRescatadorMRS.tareas.*
import icaro.aplicaciones.agentes.agenteAplicacionRescatadorMRS.objetivos.*

// Propias de MRS
import icaro.aplicaciones.MRS.informacion.*;
import icaro.aplicaciones.MRS.tareasComunes.*;

// Propias de Java
import java.util.List;
import java.util.ArrayList;
import java.lang.String;
import java.util.Calendar;
import java.util.Timer;
//-----------------------------------------------------------------------------------------------------------

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;
 
 
 /* Si no hay foco, es que estamos en la primera regla */
rule "Acciones Iniciales Rescatador MRS "
 when
    not ( exists(Focus()))
 then
   TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InicializarRobot.class);
   tarea1.ejecutar(agentId);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//------------  ProcesarInicioFase ---------------------
rule "Nueva Fase"
 when
 	$fase : InicioEstado($st : estadoIniciado)
 	$yo : Robot( getName() == agentId)
 	$fc : Focus()
 	$mo : MisObjetivos()
 then
	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarInicioFase.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $fase);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName()+ " " +$st);
end


//------------  ConocerEquipo  --------------------------
rule "Me han informado del equipo (conocerEquipo)"
 when
 	$yo : Robot( getName() == agentId)
 	$fc : Focus()
 	$mo : MisObjetivos()
 	$obj: ConocerEquipo(state == Objetivo.SOLVING)
    robots : ListaIds()
 then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarNombreEquipo.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, robots);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//----------- Evaluar solicitudes -----------------------
rule "Procesar peticion Victima"
 salience( 99 )
 when
  	$yo : Robot( getName() == agentId)
 	$obj: EvaluarSolicitudes(state == Objetivo.SOLVING)
 	$fc : Focus(foco == $obj)
 	$mo : MisObjetivos()
 	
 	robots: ListaIds()
    
   	msg : SolicitudAyuda() //El mensaje de auxilio de los mineros
  
   	ce : ControlEvaluacionVictimas()
 then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarSolicitudAyuda.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, robots, msg, ce);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//----------- Recibir evaluaciones otros robots -----------------------
rule "Recibir mensaje evaluacion otro robot"
 salience( 98 )
 when
   	$yo : Robot( getName() == agentId)
 	$obj: EvaluarSolicitudes(state == Objetivo.SOLVING)
 	$fc : Focus(foco == $obj)
 	$mo : MisObjetivos()

    robots: ListaIds()
 	
 	msg: MsgEvaluacionRobot($v: minero)
 
 	ce : ControlEvaluacionVictimas()
 	eo : EvaluacionObjetivo(victimaName == $v)
 then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarEvaluacion.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, robots, msg, ce, eo);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//----------------------------------//
// OJO: Revisar la chapuza de timer //
//----------------------------------//

//----------- Todas victimas evaluadas objetivo actual -----------------------
rule "Se han evaluado todas las victimas por todos los robots"
timer( expr: 2000 )  //CHAPUZA, pero se adelantaba esta regla
 when
  	$yo : Robot( getName() == agentId)
 	$obj: EvaluarSolicitudes(state == Objetivo.SOLVING)
 	$fc : Focus(foco == $obj)
 	$mo : MisObjetivos()

	ce : ControlEvaluacionVictimas(finalizadaTodasEvaluaciones == true)
	not(  SolicitudAyuda() )  //No quedan solicitudes por evaluar por nosotros
	not( MsgEvaluacionRobot() ) //Ni evaluaciones de otros robots que procesar
 then
	//$obj.setSolved();
	//update($obj);
		

	//Objetivo o2 = new AsignarRobots();
	//o2.setSolving();
	//$mo.addObjetivo(o2);
	//$fc.setFoco(o2);

	//update($mo);
	//update($fc);
	//insert(o2); 	

	TareaSincrona t1 = gestorTareas.crearTareaSincrona(TodasVictimasEvaluadas.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, ce);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end	


//----------- Intentar asignar víctima a mi mismo (en orden) -----------------------
rule "Comprobar si asignar victima o esperar"
salience(50)
 when
 	$yo : Robot( getName() == agentId, getStatus() == RobotStatus.PARADO)
 			
 	$obj: AsignarRobots(state == Objetivo.SOLVING)
 	$fc : Focus(foco == $obj)
 	$mo : MisObjetivos()

    robots: ListaIds()
     	
    ce : ControlEvaluacionVictimas($v: proximaVictima)
    eo : EvaluacionObjetivo(victimaName == $v, finalizadaEvaluacion == true)
    
 
    not ( MsgAsignacionObjetivo(minero == $v) )
 then
 	if(ce.isRobotAsigned(agentId))
 		return;
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(AsignarRobotVictima.class);
 	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, robots, ce, eo);
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName()+" " + $v);
end


//Estoy esperando a que me informe el mejor robot
rule "Esperar confirmacion de robot asignado a objetivo"
salience(80)
  when 
    $yo : Robot( getName() == agentId)
// 	$obj: EsperaRobotAsignado($v: minero, state == Objetivo.SOLVING)
// 	$fc : Focus(foco == $obj)
// 	$mo : MisObjetivos()
  	
//  	obj2 : AsignarRobots()
//  	msg : MsgAsignacionObjetivo(minero == $v)
    	msg : MsgAsignacionObjetivo($v:minero)	
  	ce : ControlEvaluacionVictimas()
  	eo : EvaluacionObjetivo(victimaName == $v, finalizadaEvaluacion == true)
  then
	//Eliminamos la lista de evaluaciones de la victima. Ya está resuelto
    retract(eo);
 
    //Eliminamos la victima de la lista de victimas a rescatar
  	ce.eliminaVictima(msg.getMinero());
  	ce.setRobotAsignado(msg.getRobot());
	update(ce);

	retract(msg)
		
//  	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarMsgAsignacionRobot.class);
//  	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, obj2, msg, ce, eo);
//  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end

//Soy el mejor robot, tengo que informar a todos
rule "Informar que soy el mejor robot"
  when
    $yo : Robot( getName() == agentId)
 	$obj: InformarSoyElMejorRobot($v: minero, state == Objetivo.SOLVING)
 	$fc : Focus(foco == $obj)
 	$mo : MisObjetivos()
  
  	lr : ListaIds()
  	
  	obj2 : AsignarRobots()
  	
  	ce : ControlEvaluacionVictimas()
  	eo : EvaluacionObjetivo(victimaName == $v, finalizadaEvaluacion == true)
  then
  	TareaSincrona t1 = gestorTareas.crearTareaSincrona(InformarAutoasignacionVictima.class);
  	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, obj2, lr, ce, eo);
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//--------------------------------------------------------------------------------------------
// El robot ya esta en movimiento. Reglas para gestionar la llegada/parada de los robots.
//--------------------------------------------------------------------------------------------

rule "Victima alcanzada"
  when
    $yo : Robot( getName() == agentId, getStatus() == RobotStatus.CON_MINERO)
 	$obj: AlcanzarVictima($v: minero, state == Objetivo.SOLVING)
 	$fc : Focus()
 	$mo : MisObjetivos()
  
  then
  	TareaSincrona t1 = gestorTareas.crearTareaSincrona(LlevarVictimaSalida.class);
  	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, $v);
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


rule "Victima salvada"
  when
    $yo : Robot( getName() == agentId, getStatus() == RobotStatus.PARADO)
 	$obj: SacarVictima($v: minero, state == Objetivo.SOLVING)
 	$fc : Focus()
 	$mo : MisObjetivos()
 	
 	$lr : ListaIds()
 	
 	$o2 : AsignarRobots()
 	$ce : ControlEvaluacionVictimas($vv: proximaVictima)
  then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(VictimaSalvada.class);
  	t1.ejecutar(agentId, $yo, $fc, $mo, $obj, $lr, $o2, $ce);
	//.................................................................................................
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end


//-----------------------------------------------------
//-- Robtos se quedan libres, recibir msg y procesar --
rule "Detectas robots inactivos"
 salience(999)
 when
 	$yo : Robot( getName() == agentId)
 	$fc : Focus()
 	$mo : MisObjetivos()

    $lr: ListaIds()
 	
 	$msg: MsgRobotLibre()
 
 	$ce : ControlEvaluacionVictimas()
 then
 	TareaSincrona t1 = gestorTareas.crearTareaSincrona(ProcesarRobotInactivo.class);
  	t1.ejecutar(agentId, $yo, $fc, $mo, $lr, $msg, $ce);
 	//.................................................................................................
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end
