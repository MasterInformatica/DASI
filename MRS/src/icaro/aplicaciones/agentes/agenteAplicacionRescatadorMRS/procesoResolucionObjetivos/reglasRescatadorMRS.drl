import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.agentes.agenteAplicacionRescatadorMRS.tareas.*
//??
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;

import icaro.aplicaciones.MRS.informacion.*;

import java.util.ArrayList;
import java.lang.String;


global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


/** Tengo un gran dilema con este agente.
* Cuando este robot se inicializa y ejecuta su primera regla, el escenario todav�a no ha sido seleccionado por
* el usuario, por lo que este robot no puede iniciarse a si mismo de manera correcta.
* Sin embargo, lo que si puede hacer al inicio es inicializar sus componentes internos (en este caso unicamente
* el componente de movimiento, que habr� que reimplementar en alg�n futuro para quitar la chapuza que hay ahora mismo).
*
* Mi idea para solventar el inicio correcto de los robots, es que el agenteIniciador de la aplicaci�n envie un mensaje a
* los robots de que el recurso de persistencia est� listo y pueden pasar a iniciarse a si mismos (o algo as�.
*
* Fdo.: Luisma
*/


rule "Acciones Iniciales Rescatador MRS "
 when
    not ( exists(Focus())) //SUPONGO QUE ESTO *SOLO* SE EJECUTA LA PRIMERA VEZ
 then
   TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(SaludaRobot.class);
   tarea1.ejecutar(null,agentId);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
   //TODO: Crear los componentes internos aqui (mvto, ..., ...)
end

 	
/**  A�adir la condicion de enviar un mensaje al robot para inicializarse **/
rule "Iniciarse a si mismo a traves del escenario"
 when
 	not ( exists( RobotBaseConocimiento(idRobot == agentId)))
 then
 	TareaSincrona t = gestorTareas.crearTareaSincrona(InicializarRobot.class);
 	t.ejecutar(null, agentId);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end




/*
rule " Otra Regla "
 when    
    misObjs: MisObjetivos()
    robot:RobotStatus()
    peticionAgte: PeticionAgente( mensajePeticion == VocabularioRosace.MsgPeticionEnvioEvaluaciones,
                                 identAgente == VocabularioRosace.IdentAgteDistribuidorTareas,victimaCC:justificacion)
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarEvaluacionAlAgteAsignador.class);
     tarea.ejecutar(null,peticionAgte,misObjs,robot,victims2R); 
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end
*/
